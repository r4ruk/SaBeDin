
General todo:
[] think about exception handling

next step:
[X] Introduce BL layer
[X] rename lookup_client to client_factory
[X] add Cors layer to accept requests from browser
[X] handle response serialization with status codes (for example: request handler health check returning OK) - partly done
[X] start with easy frontend work to see if the communication is working
[X] Add authentication Middleware
[X] research Port for postgresql (set in .env file now) -> :5432
[X] Add persistence layer
[X] Add seed data minimum for users. (for authentication)
[X] Test different possible ways to get in the app atm. via curl command
[X] fix existing tests
[X] Add query builder tests
[X] Finish query builder
[X] Add nameof macro to not strongly type fieldnames for db
[X] think transactions in db level - https://github.com/launchbadge/sqlx/tree/main/examples/postgres/transaction
        -> implemented in service level so it can cover multiple writes in case it is needed.
[X] fix and add tests
[X] redo and test service implemented
[] Add cache...? (in service, handle different types...)

[X] start connecting queue and think about return-pipeline
    [X] examples to be found in the following links:
        https://www.zupzup.org/rmq-in-rust/index.html
        https://github.com/zupzup/rmq-in-rust-example/blob/main/src/main.rs#L46 (code for the article before)
    [X] figure out direct queue declaration when publishing, which is not working atm.
        https://docs.rs/lapin/latest/lapin/struct.Channel.html#method.exchange_declare
[X] test message queue
    [X] figure out how to asynchronously publish on the returning temporary queue inside the test automatically.
        atm it can only be tested by manually publish a message into that queue
        => Can probably be handled if i tear the function apart and return from the publish_returning function the name
        of the temporary queue and await the answer onto it in another function..
        like this it should be possible to first send a message onto the new temporary queue and then start listening onto it...
        -> i did exactly what i thought and splitted the whole queue manager into publisher and receiver so they can be tested seperately
[X] add push messenger which can broadcast message to clients.



{PERSISTENCE}
[X] Paging and Sorting handling for queries (examples::portfolio::persistence)
    -> try find generic solution for that problem (using QueryBuilder)
[X] Fix all tests of query builder which got broken by this change
[X] Add more tests to cover the paging and sorting options



{SERVICE MANAGER}
[] figure out a way to handle paging and sorting as efficiently as possible (also as generically as possible)
[] Refactor handle_query function to not only work with single param or else fail
    (in case all should be retrieved it will have no params)


UI
[] Implement Homepage
[] Register Page
[] Login Page



further work
[] think about general serialization/deserialization into classes in ts.
[] cache in the backend handling





NOTES:
request_handler:
 - develop a method, which handles errors and errorstatus codes and gives back
   a Result which can then be returned generally
 - currently statically implemented on line 35