
General todo:
[] think about exception handling

next step:
[X] Introduce BL layer
[X] rename lookup_client to client_factory
[X] add Cors layer to accept requests from browser
[X] handle response serialization with status codes (for example: request handler health check returning OK) - partly done
[X] start with easy frontend work to see if the communication is working
[X] Add authentication Middleware
[X] research Port for postgresql (set in .env file now) -> :5432
[X] Add persistence layer
[X] Add seed data minimum for users. (for authentication)
[X] Test different possible ways to get in the app atm. via curl command
[X] fix existing tests
[X] Add query builder tests
[X] Finish query builder
[X] Add nameof macro to not strongly type fieldnames for db
[X] think transactions in db level - https://github.com/launchbadge/sqlx/tree/main/examples/postgres/transaction
        -> implemented in service level so it can cover multiple writes in case it is needed.
[X] fix and add tests
[] redo and test service implemented
[] Add cache...? (in service, handle different types...)

[] start connecting queue and think about return-pipeline
    [] examples to be found in the following links:
        https://www.zupzup.org/rmq-in-rust/index.html
        https://github.com/zupzup/rmq-in-rust-example/blob/main/src/main.rs#L46 (code for the article before)


further work
[] think about general serialization/deserialization into classes in ts.
[] cache in the backend handling





NOTES:
request_handler:
 - develop a method, which handles errors and errorstatus codes and gives back
   a Result which can then be returned generally
 - currently statically implemented on line 35